   Compiling registration-service v0.1.0 (C:\Work\iohk\vit-testing\registration-service)
error[E0583]: file not found for module `stake`
 --> registration-service\src\cardano\cli\command\stake_address\mod.rs:1:1
  |
1 | mod stake;
  | ^^^^^^^^^^
  |
  = help: to create the module `stake`, create file "registration-service\src\cardano\cli\command\stake_address\stake.rs" or "registration-service\src\cardano\cli\command\stake_address\stake\mod.rs"

error[E0252]: the name `CardanoCliCommand` is defined multiple times
 --> registration-service\src\cardano\cli\mod.rs:4:5
  |
2 | use crate::cardano::cli::command::CardanoCliCommand;
  |     ----------------------------------------------- previous import of the type `CardanoCliCommand` here
3 | use crate::cardano::cli::api::{Address,StakeAddress,Transaction,Query};
4 | use crate::cardano::cli::command::CardanoCliCommand;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `CardanoCliCommand` reimported here
  |
  = note: `CardanoCliCommand` must be defined only once in the type namespace of this module

error: invalid format string: expected `'}'`, found `'?'`
  --> registration-service\src\cardano\cli\command\address\build.rs:34:49
   |
34 |         println!("Cardano Cli - address build: {?}", command);
   |                                                -^ expected `}` in format string
   |                                                |
   |                                                because of this opening brace
   |
   = note: if you intended to print `{`, you can escape it using `{{`

error[E0433]: failed to resolve: use of undeclared crate or module `assert_cmd`
 --> registration-service\src\cardano\cli\api\address.rs:2:5
  |
2 | use assert_cmd::assert::OutputAssertExt;
  |     ^^^^^^^^^^ use of undeclared crate or module `assert_cmd`

error[E0432]: unresolved import `super::command`
 --> registration-service\src\cardano\cli\api\address.rs:1:12
  |
1 | use super::command::AddressCommand;
  |            ^^^^^^^ could not find `command` in `super`

error[E0432]: unresolved import `chain_addr`
 --> registration-service\src\cardano\cli\api\address.rs:3:5
  |
3 | use chain_addr::Discrimination;
  |     ^^^^^^^^^^ use of undeclared crate or module `chain_addr`

error[E0433]: failed to resolve: use of undeclared crate or module `assert_cmd`
 --> registration-service\src\cardano\cli\api\query.rs:2:5
  |
2 | use assert_cmd::assert::OutputAssertExt;
  |     ^^^^^^^^^^ use of undeclared crate or module `assert_cmd`

error[E0432]: unresolved import `super::command`
 --> registration-service\src\cardano\cli\api\query.rs:1:12
  |
1 | use super::command::QueryCommand;
  |            ^^^^^^^ could not find `command` in `super`

error[E0432]: unresolved import `chain_addr`
 --> registration-service\src\cardano\cli\api\query.rs:3:5
  |
3 | use chain_addr::Discrimination;
  |     ^^^^^^^^^^ use of undeclared crate or module `chain_addr`

error[E0433]: failed to resolve: use of undeclared crate or module `assert_cmd`
 --> registration-service\src\cardano\cli\api\stake_address.rs:2:5
  |
2 | use assert_cmd::assert::OutputAssertExt;
  |     ^^^^^^^^^^ use of undeclared crate or module `assert_cmd`

error[E0432]: unresolved import `super::command`
 --> registration-service\src\cardano\cli\api\stake_address.rs:1:12
  |
1 | use super::command::StakeAddressCommand;
  |            ^^^^^^^ could not find `command` in `super`

error[E0432]: unresolved import `chain_addr`
 --> registration-service\src\cardano\cli\api\stake_address.rs:3:5
  |
3 | use chain_addr::Discrimination;
  |     ^^^^^^^^^^ use of undeclared crate or module `chain_addr`

error[E0433]: failed to resolve: use of undeclared crate or module `assert_cmd`
 --> registration-service\src\cardano\cli\api\transaction.rs:2:5
  |
2 | use assert_cmd::assert::OutputAssertExt;
  |     ^^^^^^^^^^ use of undeclared crate or module `assert_cmd`

error[E0432]: unresolved import `super::command`
 --> registration-service\src\cardano\cli\api\transaction.rs:1:12
  |
1 | use super::command::TransactionCommand;
  |            ^^^^^^^ could not find `command` in `super`

error[E0432]: unresolved import `chain_addr`
 --> registration-service\src\cardano\cli\api\transaction.rs:3:5
  |
3 | use chain_addr::Discrimination;
  |     ^^^^^^^^^^ use of undeclared crate or module `chain_addr`

error[E0432]: unresolved imports `transaction::TransactionIdCommand`, `transaction::TransactionSubmitCommand`, `transaction::TransactionSignCommand`, `transaction::TransactionSubmitCommand`
 --> registration-service\src\cardano\cli\command\mod.rs:7:23
  |
7 | pub use transaction::{TransactionIdCommand,TransactionSubmitCommand,TransactionSignCommand,TransactionSubmitCommand};
  |                       ^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^ no `TransactionSubmitCommand` in `cardano::cli::command::transaction`
  |                       |                    |                        |
  |                       |                    |                        no `TransactionSignCommand` in `cardano::cli::command::transaction`
  |                       |                    no `TransactionSubmitCommand` in `cardano::cli::command::transaction`
  |                       no `TransactionIdCommand` in `cardano::cli::command::transaction`
  |
help: a similar name exists in the module
  |
7 | pub use transaction::{TransactionCommand,TransactionSubmitCommand,TransactionSignCommand,TransactionSubmitCommand};
  |                       ~~~~~~~~~~~~~~~~~~
help: a similar name exists in the module
  |
7 | pub use transaction::{TransactionIdCommand,TransactionCommand,TransactionSignCommand,TransactionSubmitCommand};
  |                                            ~~~~~~~~~~~~~~~~~~
help: a similar name exists in the module
  |
7 | pub use transaction::{TransactionIdCommand,TransactionSubmitCommand,TransactionCommand,TransactionSubmitCommand};
  |                                                                     ~~~~~~~~~~~~~~~~~~
help: a similar name exists in the module
  |
7 | pub use transaction::{TransactionIdCommand,TransactionSubmitCommand,TransactionSignCommand,TransactionCommand};
  |                                                                                            ~~~~~~~~~~~~~~~~~~

error[E0432]: unresolved import `address::AddressBuildCommand`
 --> registration-service\src\cardano\cli\command\mod.rs:8:9
  |
8 | pub use address::AddressBuildCommand;
  |         ^^^^^^^^^-------------------
  |         |        |
  |         |        help: a similar name exists in the module: `AddressCommand`
  |         no `AddressBuildCommand` in `cardano::cli::command::address`

error[E0432]: unresolved import `stake_address::StakeAddressBuildCommand`
 --> registration-service\src\cardano\cli\command\mod.rs:9:9
  |
9 | pub use stake_address::StakeAddressBuildCommand;
  |         ^^^^^^^^^^^^^^^------------------------
  |         |              |
  |         |              help: a similar name exists in the module: `StakeAddressCommand`
  |         no `StakeAddressBuildCommand` in `cardano::cli::command::stake_address`

error[E0432]: unresolved import `serde::Serizalize`
 --> registration-service\src\cardano\data.rs:1:13
  |
1 | use serde::{Serizalize,Deserialize};
  |             ^^^^^^^^^^
  |             |
  |             no `Serizalize` in the root
  |             help: a similar name exists in the module: `Serialize`

error[E0432]: unresolved import `crate::VoterRegistrationCli`
  --> registration-service\src\job\builder.rs:20:5
   |
20 | use crate::VoterRegistrationCli;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `VoterRegistrationCli` in the root

error: cannot find derive macro `Serialize` in this scope
  --> registration-service\src\cardano\data.rs:3:52
   |
3  | #[derive(Debug, PartialEq, Eq, Clone, Deserialize, Serialize)]
   |                                                    ^^^^^^^^^ help: a derive macro with a similar name exists: `Deserialize`
   |
  ::: C:\Users\Dariusz\.cargo\registry\src\github.com-1ecc6299db9ec823\serde_derive-1.0.137\src\lib.rs:98:1
   |
98 | pub fn derive_deserialize(input: TokenStream) -> TokenStream {
   | ------------------------------------------------------------ similarly named derive macro `Deserialize` defined here
   |
   = note: consider importing this derive macro:
           serde::Serialize

error[E0433]: failed to resolve: could not find `StakeAddressBuildCommand` in `stake`
  --> registration-service\src\cardano\cli\command\stake_address\mod.rs:14:16
   |
14 |         stake::StakeAddressBuildCommand::new(self.command)
   |                ^^^^^^^^^^^^^^^^^^^^^^^^ could not find `StakeAddressBuildCommand` in `stake`

error[E0412]: cannot find type `Path` in this scope
  --> registration-service\src\cardano\cli\api\address.rs:16:27
   |
16 |     pub fn build<P: AsRef<Path>, Q: AsRef<Path>>(&self, verification_key: P,stake_verification_key : P, output: Q, network: NetworkType) ...
   |                           ^^^^ not found in this scope
   |
help: consider importing this struct
   |
1  | use std::path::Path;
   |

error[E0412]: cannot find type `Path` in this scope
  --> registration-service\src\cardano\cli\api\address.rs:16:43
   |
16 |     pub fn build<P: AsRef<Path>, Q: AsRef<Path>>(&self, verification_key: P,stake_verification_key : P, output: Q, network: NetworkType) ...
   |                                           ^^^^ not found in this scope
   |
help: consider importing this struct
   |
1  | use std::path::Path;
   |

error[E0412]: cannot find type `NetworkType` in this scope
  --> registration-service\src\cardano\cli\api\address.rs:16:125
   |
16 | ...,stake_verification_key : P, output: Q, network: NetworkType) -> Result<ExitStatus,Error> {
   |                                                     ^^^^^^^^^^^ not found in this scope
   |
help: consider importing this enum
   |
1  | use crate::config::NetworkType;
   |

error[E0412]: cannot find type `ExitStatus` in this scope
  --> registration-service\src\cardano\cli\api\address.rs:16:148
   |
16 | ...y : P, output: Q, network: NetworkType) -> Result<ExitStatus,Error> {
   |                                                      ^^^^^^^^^^ not found in this scope
   |
help: consider importing this struct
   |
1  | use std::process::ExitStatus;
   |

error[E0412]: cannot find type `Error` in this scope
  --> registration-service\src\cardano\cli\api\address.rs:16:159
   |
16 | ...tput: Q, network: NetworkType) -> Result<ExitStatus,Error> {
   |                                                        ^^^^^ not found in this scope
   |
help: consider importing one of these items
   |
1  | use core::fmt::Error;
   |
1  | use crate::args::Error;
   |
1  | use crate::cardano::cli::Error;
   |
1  | use crate::client::args::Error;
   |
     and 27 other candidates

error[E0425]: cannot find value `command` in this scope
  --> registration-service\src\cardano\cli\api\address.rs:28:44
   |
28 |         println!("generate address: {:?}", command);
   |                                            ^^^^^^^ not found in this scope

error[E0412]: cannot find type `NetworkType` in this scope
  --> registration-service\src\cardano\cli\api\query.rs:17:32
   |
17 |     pub fn tip(&self, network: NetworkType) -> Result<String, Error> {
   |                                ^^^^^^^^^^^ not found in this scope
   |
help: consider importing this enum
   |
1  | use crate::config::NetworkType;
   |

error[E0412]: cannot find type `Error` in this scope
  --> registration-service\src\cardano\cli\api\query.rs:17:63
   |
17 |     pub fn tip(&self, network: NetworkType) -> Result<String, Error> {
   |                                                               ^^^^^ not found in this scope
   |
help: consider importing one of these items
   |
1  | use core::fmt::Error;
   |
1  | use crate::args::Error;
   |
1  | use crate::cardano::cli::Error;
   |
1  | use crate::client::args::Error;
   |
     and 27 other candidates

error[E0433]: failed to resolve: use of undeclared type `Error`
  --> registration-service\src\cardano\cli\api\query.rs:21:26
   |
21 |             .map_err(|x| Error::CannotGetOutputFromCommand(x.to_string()))?
   |                          ^^^^^ not found in this scope
   |
help: consider importing one of these items
   |
1  | use core::fmt::Error;
   |
1  | use crate::args::Error;
   |
1  | use crate::cardano::cli::Error;
   |
1  | use crate::client::args::Error;
   |
     and 27 other candidates

error[E0412]: cannot find type `NetworkType` in this scope
  --> registration-service\src\cardano\cli\api\query.rs:28:70
   |
28 |     pub fn utxo<S: Into<String>>(&self, payment_address: S, network: NetworkType) -> Result<String, Error> {
   |                                                                      ^^^^^^^^^^^ not found in this scope
   |
help: consider importing this enum
   |
1  | use crate::config::NetworkType;
   |

error[E0412]: cannot find type `Error` in this scope
  --> registration-service\src\cardano\cli\api\query.rs:28:101
   |
28 |     pub fn utxo<S: Into<String>>(&self, payment_address: S, network: NetworkType) -> Result<String, Error> {
   |                                                                                                     ^^^^^ not found in this scope
   |
help: consider importing one of these items
   |
1  | use core::fmt::Error;
   |
1  | use crate::args::Error;
   |
1  | use crate::cardano::cli::Error;
   |
1  | use crate::client::args::Error;
   |
     and 27 other candidates

error[E0433]: failed to resolve: use of undeclared type `Error`
  --> registration-service\src\cardano\cli\api\query.rs:32:26
   |
32 |             .map_err(|x| Error::CannotGetOutputFromCommand(x.to_string()))?
   |                          ^^^^^ not found in this scope
   |
help: consider importing one of these items
   |
1  | use core::fmt::Error;
   |
1  | use crate::args::Error;
   |
1  | use crate::cardano::cli::Error;
   |
1  | use crate::client::args::Error;
   |
     and 27 other candidates

error[E0412]: cannot find type `Error` in this scope
  --> registration-service\src\cardano\cli\api\query.rs:39:84
   |
39 |     pub fn get_funds<S: Into<String>>(&self, payment_address: S) -> Result<String, Error> {
   |                                                                                    ^^^^^ not found in this scope
   |
help: consider importing one of these items
   |
1  | use core::fmt::Error;
   |
1  | use crate::args::Error;
   |
1  | use crate::cardano::cli::Error;
   |
1  | use crate::client::args::Error;
   |
     and 27 other candidates

error[E0412]: cannot find type `Error` in this scope
  --> registration-service\src\cardano\cli\api\query.rs:53:53
   |
53 |     pub fn get_funds(output: String) -> Result<u64, Error> {
   |                                                     ^^^^^ not found in this scope
   |
help: consider importing one of these items
   |
1  | use core::fmt::Error;
   |
1  | use crate::args::Error;
   |
1  | use crate::cardano::cli::Error;
   |
1  | use crate::client::args::Error;
   |
     and 27 other candidates

error[E0412]: cannot find type `FundsResponse` in this scope
  --> registration-service\src\cardano\cli\api\query.rs:55:23
   |
55 |         let response: FundsResponse =
   |                       ^^^^^^^^^^^^^ not found in this scope
   |
help: consider importing this struct
   |
1  | use crate::job::FundsResponse;
   |

error[E0433]: failed to resolve: use of undeclared type `Error`
  --> registration-service\src\cardano\cli\api\query.rs:56:55
   |
56 |             serde_json::from_str(&output).map_err(|_| Error::CannotParseCardanoCliOutput(output))?;
   |                                                       ^^^^^ not found in this scope
   |
help: consider importing one of these items
   |
1  | use core::fmt::Error;
   |
1  | use crate::args::Error;
   |
1  | use crate::cardano::cli::Error;
   |
1  | use crate::client::args::Error;
   |
     and 27 other candidates

error[E0425]: cannot find value `stake_address_command` in this scope
  --> registration-service\src\cardano\cli\api\stake_address.rs:14:16
   |
14 |         Self { stake_address_command }
   |                ^^^^^^^^^^^^^^^^^^^^^ a field by this name exists in `Self`

error[E0412]: cannot find type `Path` in this scope
  --> registration-service\src\cardano\cli\api\stake_address.rs:17:27
   |
17 |     pub fn build<P: AsRef<Path>, Q: AsRef<Path>>(&self, verification_key: P,stake_verification_key : P, output: Q, network: NetworkType) ...
   |                           ^^^^ not found in this scope
   |
help: consider importing this struct
   |
1  | use std::path::Path;
   |

error[E0412]: cannot find type `Path` in this scope
  --> registration-service\src\cardano\cli\api\stake_address.rs:17:43
   |
17 |     pub fn build<P: AsRef<Path>, Q: AsRef<Path>>(&self, verification_key: P,stake_verification_key : P, output: Q, network: NetworkType) ...
   |                                           ^^^^ not found in this scope
   |
help: consider importing this struct
   |
1  | use std::path::Path;
   |

error[E0412]: cannot find type `NetworkType` in this scope
  --> registration-service\src\cardano\cli\api\stake_address.rs:17:125
   |
17 | ...,stake_verification_key : P, output: Q, network: NetworkType) -> Result<ExitStatus,Error> {
   |                                                     ^^^^^^^^^^^ not found in this scope
   |
help: consider importing this enum
   |
1  | use crate::config::NetworkType;
   |

error[E0412]: cannot find type `ExitStatus` in this scope
  --> registration-service\src\cardano\cli\api\stake_address.rs:17:148
   |
17 | ...y : P, output: Q, network: NetworkType) -> Result<ExitStatus,Error> {
   |                                                      ^^^^^^^^^^ not found in this scope
   |
help: consider importing this struct
   |
1  | use std::process::ExitStatus;
   |

error[E0412]: cannot find type `Error` in this scope
  --> registration-service\src\cardano\cli\api\stake_address.rs:17:159
   |
17 | ...tput: Q, network: NetworkType) -> Result<ExitStatus,Error> {
   |                                                        ^^^^^ not found in this scope
   |
help: consider importing one of these items
   |
1  | use core::fmt::Error;
   |
1  | use crate::args::Error;
   |
1  | use crate::cardano::cli::Error;
   |
1  | use crate::client::args::Error;
   |
     and 27 other candidates

error[E0412]: cannot find type `Path` in this scope
  --> registration-service\src\cardano\cli\api\transaction.rs:18:26
   |
18 |     pub fn sign<P: AsRef<Path>, Q: AsRef<Path>>(&self, tx_raw: P, payment_skey_file: P,output: Q) -> Result<ExitStatus,Error> {
   |                          ^^^^ not found in this scope
   |
help: consider importing this struct
   |
1  | use std::path::Path;
   |

error[E0412]: cannot find type `Path` in this scope
  --> registration-service\src\cardano\cli\api\transaction.rs:18:42
   |
18 |     pub fn sign<P: AsRef<Path>, Q: AsRef<Path>>(&self, tx_raw: P, payment_skey_file: P,output: Q) -> Result<ExitStatus,Error> {
   |                                          ^^^^ not found in this scope
   |
help: consider importing this struct
   |
1  | use std::path::Path;
   |

error[E0412]: cannot find type `ExitStatus` in this scope
  --> registration-service\src\cardano\cli\api\transaction.rs:18:109
   |
18 |     pub fn sign<P: AsRef<Path>, Q: AsRef<Path>>(&self, tx_raw: P, payment_skey_file: P,output: Q) -> Result<ExitStatus,Error> {
   |                                                                                                             ^^^^^^^^^^ not found in this scope
   |
help: consider importing this struct
   |
1  | use std::process::ExitStatus;
   |

error[E0412]: cannot find type `Error` in this scope
  --> registration-service\src\cardano\cli\api\transaction.rs:18:120
   |
18 |     pub fn sign<P: AsRef<Path>, Q: AsRef<Path>>(&self, tx_raw: P, payment_skey_file: P,output: Q) -> Result<ExitStatus,Error> {
   |                                                                                                                        ^^^^^ not found in this scope
   |
help: consider importing one of these items
   |
1  | use core::fmt::Error;
   |
1  | use crate::args::Error;
   |
1  | use crate::cardano::cli::Error;
   |
1  | use crate::client::args::Error;
   |
     and 27 other candidates

error[E0412]: cannot find type `Path` in this scope
  --> registration-service\src\cardano\cli\api\transaction.rs:28:28
   |
28 |     pub fn submit<P: AsRef<Path>, Q: AsRef<Path>>(&self, tx_signed: P) -> Result<String,Error> {
   |                            ^^^^ not found in this scope
   |
help: consider importing this struct
   |
1  | use std::path::Path;
   |

error[E0412]: cannot find type `Path` in this scope
  --> registration-service\src\cardano\cli\api\transaction.rs:28:44
   |
28 |     pub fn submit<P: AsRef<Path>, Q: AsRef<Path>>(&self, tx_signed: P) -> Result<String,Error> {
   |                                            ^^^^ not found in this scope
   |
help: consider importing this struct
   |
1  | use std::path::Path;
   |

error[E0412]: cannot find type `Error` in this scope
  --> registration-service\src\cardano\cli\api\transaction.rs:28:89
   |
28 |     pub fn submit<P: AsRef<Path>, Q: AsRef<Path>>(&self, tx_signed: P) -> Result<String,Error> {
   |                                                                                         ^^^^^ not found in this scope
   |
help: consider importing one of these items
   |
1  | use core::fmt::Error;
   |
1  | use crate::args::Error;
   |
1  | use crate::cardano::cli::Error;
   |
1  | use crate::client::args::Error;
   |
     and 27 other candidates

error[E0425]: cannot find value `output` in this scope
  --> registration-service\src\cardano\cli\api\transaction.rs:31:32
   |
31 |         println!("status: {}", output.status);
   |                                ^^^^^^ not found in this scope

error[E0425]: cannot find value `output` in this scope
  --> registration-service\src\cardano\cli\api\transaction.rs:32:38
   |
32 |         std::io::stdout().write_all(&output.stdout)?;
   |                                      ^^^^^^ not found in this scope

error[E0425]: cannot find value `output` in this scope
  --> registration-service\src\cardano\cli\api\transaction.rs:33:38
   |
33 |         std::io::stderr().write_all(&output.stderr)?;
   |                                      ^^^^^^ not found in this scope

error[E0433]: failed to resolve: use of undeclared type `Error`
  --> registration-service\src\cardano\cli\api\transaction.rs:37:22
   |
37 |         .map_err(|x| Error::CannotGetOutputFromCommand(command.to_string()))?
   |                      ^^^^^ not found in this scope
   |
help: consider importing one of these items
   |
1  | use core::fmt::Error;
   |
1  | use crate::args::Error;
   |
1  | use crate::cardano::cli::Error;
   |
1  | use crate::client::args::Error;
   |
     and 27 other candidates

error[E0412]: cannot find type `P` in this scope
  --> registration-service\src\cardano\cli\api\transaction.rs:41:32
   |
41 |     pub fn id(self, tx_signed: P) -> Result<String,Error> {
   |                                ^ not found in this scope

error[E0412]: cannot find type `Error` in this scope
  --> registration-service\src\cardano\cli\api\transaction.rs:41:52
   |
41 |     pub fn id(self, tx_signed: P) -> Result<String,Error> {
   |                                                    ^^^^^ not found in this scope
   |
help: consider importing one of these items
   |
1  | use core::fmt::Error;
   |
1  | use crate::args::Error;
   |
1  | use crate::cardano::cli::Error;
   |
1  | use crate::client::args::Error;
   |
     and 27 other candidates

error[E0425]: cannot find value `output` in this scope
  --> registration-service\src\cardano\cli\api\transaction.rs:43:32
   |
43 |         println!("status: {}", output.status);
   |                                ^^^^^^ not found in this scope

error[E0425]: cannot find value `output` in this scope
  --> registration-service\src\cardano\cli\api\transaction.rs:44:38
   |
44 |         std::io::stdout().write_all(&output.stdout)?;
   |                                      ^^^^^^ not found in this scope

error[E0425]: cannot find value `output` in this scope
  --> registration-service\src\cardano\cli\api\transaction.rs:45:38
   |
45 |         std::io::stderr().write_all(&output.stderr)?;
   |                                      ^^^^^^ not found in this scope

error[E0433]: failed to resolve: use of undeclared type `Error`
  --> registration-service\src\cardano\cli\api\transaction.rs:48:26
   |
48 |             .map_err(|x| Error::CannotGetOutputFromCommand(command.to_string()))?
   |                          ^^^^^ not found in this scope
   |
help: consider importing one of these items
   |
1  | use core::fmt::Error;
   |
1  | use crate::args::Error;
   |
1  | use crate::cardano::cli::Error;
   |
1  | use crate::client::args::Error;
   |
     and 27 other candidates

error[E0412]: cannot find type `NetworkType` in this scope
  --> registration-service\src\cardano\cli\command\address\build.rs:27:39
   |
27 |     pub fn network(mut self, network: NetworkType) -> Self {
   |                                       ^^^^^^^^^^^ not found in this scope
   |
help: consider importing this enum
   |
1  | use crate::config::NetworkType;
   |

error[E0412]: cannot find type `AddressBuildCommand` in this scope
  --> registration-service\src\cardano\cli\command\address\mod.rs:12:27
   |
3  | pub struct AddressCommand {
   | ------------------------- similarly named struct `AddressCommand` defined here
...
12 |     pub fn build(self) -> AddressBuildCommand {
   |                           ^^^^^^^^^^^^^^^^^^^
   |
help: a struct with a similar name exists
   |
12 |     pub fn build(self) -> AddressCommand {
   |                           ~~~~~~~~~~~~~~
help: consider importing this struct
   |
2  | use crate::cardano::cli::command::address::build::AddressBuildCommand;
   |

error[E0425]: cannot find value `command` in this scope
  --> registration-service\src\cardano\cli\command\query.rs:14:24
   |
14 |         self.command = command.arg("tip").arg_network(self.config.network);
   |                        ^^^^^^^ help: you might have meant to use the available field: `self.command`

error[E0425]: cannot find value `command` in this scope
  --> registration-service\src\cardano\cli\command\query.rs:19:24
   |
19 |         self.command = command
   |                        ^^^^^^^ help: you might have meant to use the available field: `self.command`

error[E0412]: cannot find type `StakeAddressBuildCommand` in this scope
  --> registration-service\src\cardano\cli\command\stake_address\mod.rs:12:27
   |
3  | pub struct StakeAddressCommand {
   | ------------------------------ similarly named struct `StakeAddressCommand` defined here
...
12 |     pub fn build(self) -> StakeAddressBuildCommand {
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^ help: a struct with a similar name exists: `StakeAddressCommand`

error[E0425]: cannot find value `command` in this scope
  --> registration-service\src\cardano\cli\command\transaction\id.rs:18:56
   |
18 |         println!("Cardano Cli - transaction id: {:?}", command);
   |                                                        ^^^^^^^ help: you might have meant to use the available field: `self.command`

error[E0425]: cannot find value `command` in this scope
  --> registration-service\src\cardano\cli\command\transaction\id.rs:19:9
   |
19 |         command
   |         ^^^^^^^ help: you might have meant to use the available field: `self.command`

error[E0425]: cannot find value `tx_raw` in this scope
  --> registration-service\src\cardano\cli\command\transaction\sign.rs:14:63
   |
14 |         self.command = self.command.arg("--tx-body-file").arg(tx_raw);
   |                                                               ^^^^^^ not found in this scope

error[E0412]: cannot find type `NetworkType` in this scope
  --> registration-service\src\cardano\cli\command\transaction\sign.rs:23:51
   |
23 |     pub fn network<P: AsRef<Path>>(self, network: NetworkType) -> Self {
   |                                                   ^^^^^^^^^^^ not found in this scope
   |
help: consider importing this enum
   |
1  | use crate::config::NetworkType;
   |

error[E0425]: cannot find value `command` in this scope
  --> registration-service\src\cardano\cli\command\transaction\sign.rs:34:58
   |
34 |         println!("Cardano Cli - transaction sign: {:?}", command);
   |                                                          ^^^^^^^ help: you might have meant to use the available field: `self.command`

error[E0425]: cannot find value `command` in this scope
  --> registration-service\src\cardano\cli\command\transaction\sign.rs:35:9
   |
35 |         command
   |         ^^^^^^^ help: you might have meant to use the available field: `self.command`

error[E0425]: cannot find value `command` in this scope
  --> registration-service\src\cardano\cli\command\transaction\submit.rs:19:60
   |
19 |         println!("Cardano Cli - transaction submit: {:?}", command);
   |                                                            ^^^^^^^ help: you might have meant to use the available field: `self.command`

error[E0425]: cannot find value `command` in this scope
  --> registration-service\src\cardano\cli\command\transaction\submit.rs:20:9
   |
20 |         command
   |         ^^^^^^^ help: you might have meant to use the available field: `self.command`

error[E0412]: cannot find type `TransactionIdCommand` in this scope
  --> registration-service\src\cardano\cli\command\transaction\mod.rs:15:24
   |
6  | pub struct TransactionCommand {
   | ----------------------------- similarly named struct `TransactionCommand` defined here
...
15 |     pub fn id(self) -> TransactionIdCommand {
   |                        ^^^^^^^^^^^^^^^^^^^^
   |
help: a struct with a similar name exists
   |
15 |     pub fn id(self) -> TransactionCommand {
   |                        ~~~~~~~~~~~~~~~~~~
help: consider importing this struct
   |
5  | use crate::cardano::cli::command::transaction::id::TransactionIdCommand;
   |

error[E0412]: cannot find type `TransactionSignCommand` in this scope
  --> registration-service\src\cardano\cli\command\transaction\mod.rs:19:26
   |
6  | pub struct TransactionCommand {
   | ----------------------------- similarly named struct `TransactionCommand` defined here
...
19 |     pub fn sign(self) -> TransactionSignCommand {
   |                          ^^^^^^^^^^^^^^^^^^^^^^
   |
help: a struct with a similar name exists
   |
19 |     pub fn sign(self) -> TransactionCommand {
   |                          ~~~~~~~~~~~~~~~~~~
help: consider importing this struct
   |
5  | use crate::cardano::cli::command::transaction::sign::TransactionSignCommand;
   |

error[E0412]: cannot find type `TransactionSubmitCommand` in this scope
  --> registration-service\src\cardano\cli\command\transaction\mod.rs:23:28
   |
6  | pub struct TransactionCommand {
   | ----------------------------- similarly named struct `TransactionCommand` defined here
...
23 |     pub fn submit(self) -> TransactionSubmitCommand {
   |                            ^^^^^^^^^^^^^^^^^^^^^^^^
   |
help: a struct with a similar name exists
   |
23 |     pub fn submit(self) -> TransactionCommand {
   |                            ~~~~~~~~~~~~~~~~~~
help: consider importing this struct
   |
5  | use crate::cardano::cli::command::transaction::submit::TransactionSubmitCommand;
   |

error[E0412]: cannot find type `AddressCommand` in this scope
  --> registration-service\src\cardano\cli\command\mod.rs:27:29
   |
27 |     pub fn key(mut self) -> AddressCommand {
   |                             ^^^^^^^^^^^^^^ not found in this scope
   |
help: consider importing this struct
   |
6  | use crate::cardano::cli::command::address::AddressCommand;
   |

error[E0412]: cannot find type `StakeAddressCommand` in this scope
  --> registration-service\src\cardano\cli\command\mod.rs:32:33
   |
32 |     pub fn address(mut self) -> StakeAddressCommand {
   |                                 ^^^^^^^^^^^^^^^^^^^ not found in this scope
   |
help: consider importing this struct
   |
6  | use crate::cardano::cli::command::stake_address::StakeAddressCommand;
   |

error[E0412]: cannot find type `TransactionCommand` in this scope
  --> registration-service\src\cardano\cli\command\mod.rs:37:37
   |
37 |     pub fn transaction(mut self) -> TransactionCommand {
   |                                     ^^^^^^^^^^^^^^^^^^ not found in this scope
   |
help: consider importing this struct
   |
6  | use crate::cardano::cli::command::transaction::TransactionCommand;
   |

error[E0412]: cannot find type `Error` in this scope
  --> registration-service\src\cardano\data.rs:44:72
   |
44 |     pub fn write_to_file<P: AsRef<Path>>(&self, path: P) -> Result<(), Error> {
   |                                                                        ^^^^^ not found in this scope
   |
help: consider importing one of these items
   |
1  | use core::fmt::Error;
   |
1  | use crate::args::Error;
   |
1  | use crate::cardano::cli::Error;
   |
1  | use crate::client::args::Error;
   |
     and 27 other candidates

error[E0425]: cannot find function `write_content` in this scope
   --> registration-service\src\cardano\data.rs:46:9
    |
46  |         write_content(&content, path)
    |         ^^^^^^^^^^^^^ not found in this scope
    |
note: function `crate::job::write_content` exists but is inaccessible
   --> registration-service\src\job\mod.rs:140:1
    |
140 | fn write_content<P: AsRef<Path>>(content: &str, path: P) -> Result<(), Error> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not accessible

error[E0425]: cannot find value `cli` in this scope
  --> registration-service\src\job\builder.rs:74:41
   |
74 |             cardano_cli: self.cardano - cli,
   |                                         ^^^ not found in this scope

error[E0425]: cannot find value `sign_transaction` in this scope
   --> registration-service\src\job\mod.rs:112:45
    |
112 |         self.cardano_cli.transaction().sign(sign_transaction);
    |                                             ^^^^^^^^^^^^^^^^ not found in this scope

error[E0425]: cannot find value `slot_no` in this scope
   --> registration-service\src\job\mod.rs:115:28
    |
115 |         Ok(JobOutputInfo { slot_no, funds })
    |                            ^^^^^^^ not found in this scope

error[E0412]: cannot find type `Error` in module `crate::cardano`
  --> registration-service\src\rest.rs:40:33
   |
40 | impl Reject for crate::cardano::Error {}
   |                                 ^^^^^ not found in `crate::cardano`
   |
help: consider importing one of these items
   |
1  | use core::fmt::Error;
   |
1  | use crate::args::Error;
   |
1  | use crate::client::args::Error;
   |
1  | use crate::client::rest::Error;
   |
     and 25 other candidates
help: if you import `Error`, refer to it directly
   |
40 - impl Reject for crate::cardano::Error {}
40 + impl Reject for Error {}
   | 

warning: unused import: `crate::cardano::cli::command::CardanoCliCommand`
 --> registration-service\src\cardano\cli\mod.rs:4:5
  |
4 | use crate::cardano::cli::command::CardanoCliCommand;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `jortestkit::prelude::ProcessOutput`
 --> registration-service\src\cardano\cli\mod.rs:5:5
  |
5 | use jortestkit::prelude::ProcessOutput;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::fs::File`
 --> registration-service\src\cardano\cli\mod.rs:7:5
  |
7 | use std::fs::File;
  |     ^^^^^^^^^^^^^

warning: unused import: `uuid::Uuid`
  --> registration-service\src\cardano\cli\mod.rs:12:5
   |
12 | use uuid::Uuid;
   |     ^^^^^^^^^^

warning: unused import: `jortestkit::prelude::ProcessOutput`
 --> registration-service\src\cardano\cli\api\address.rs:4:5
  |
4 | use jortestkit::prelude::ProcessOutput;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::collections::BTreeMap`
 --> registration-service\src\cardano\cli\api\address.rs:5:5
  |
5 | use std::collections::BTreeMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::collections::BTreeMap`
 --> registration-service\src\cardano\cli\api\query.rs:5:5
  |
5 | use std::collections::BTreeMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::io::Write`
 --> registration-service\src\cardano\cli\api\query.rs:6:5
  |
6 | use std::io::Write;
  |     ^^^^^^^^^^^^^^

warning: unused import: `jortestkit::prelude::ProcessOutput`
 --> registration-service\src\cardano\cli\api\stake_address.rs:4:5
  |
4 | use jortestkit::prelude::ProcessOutput;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::collections::BTreeMap`
 --> registration-service\src\cardano\cli\api\stake_address.rs:5:5
  |
5 | use std::collections::BTreeMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::collections::BTreeMap`
 --> registration-service\src\cardano\cli\api\transaction.rs:5:5
  |
5 | use std::collections::BTreeMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::path::Path`
 --> registration-service\src\cardano\cli\command\query.rs:2:5
  |
2 | use std::path::Path;
  |     ^^^^^^^^^^^^^^^

warning: unused import: `crate::request::Request`
 --> registration-service\src\job\builder.rs:2:5
  |
2 | use crate::request::Request;
  |     ^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::utils::CommandExt as _`
 --> registration-service\src\job\builder.rs:3:5
  |
3 | use crate::utils::CommandExt as _;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `jormungandr_automation::jcli::JCli`
 --> registration-service\src\job\builder.rs:5:5
  |
5 | use jormungandr_automation::jcli::JCli;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `jortestkit::prelude::read_file`
 --> registration-service\src\job\builder.rs:6:5
  |
6 | use jortestkit::prelude::read_file;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `jortestkit::prelude::ProcessOutput`
 --> registration-service\src\job\builder.rs:7:5
  |
7 | use jortestkit::prelude::ProcessOutput;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `Deserialize`, `Serialize`
 --> registration-service\src\job\builder.rs:8:13
  |
8 | use serde::{Deserialize, Serialize};
  |             ^^^^^^^^^^^  ^^^^^^^^^

warning: unused import: `std::collections::HashMap`
 --> registration-service\src\job\builder.rs:9:5
  |
9 | use std::collections::HashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::io::Write`
  --> registration-service\src\job\builder.rs:10:5
   |
10 | use std::io::Write;
   |     ^^^^^^^^^^^^^^

warning: unused import: `std::process::Command`
  --> registration-service\src\job\builder.rs:12:5
   |
12 | use std::process::Command;
   |     ^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::process::ExitStatus`
  --> registration-service\src\job\builder.rs:13:5
   |
13 | use std::process::ExitStatus;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `thiserror::Error`
  --> registration-service\src\job\builder.rs:15:5
   |
15 | use thiserror::Error;
   |     ^^^^^^^^^^^^^^^^

warning: unused import: `crate::utils::CommandExt as _`
 --> registration-service\src\job\mod.rs:9:5
  |
9 | use crate::utils::CommandExt as _;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `jortestkit::prelude::ProcessOutput`
  --> registration-service\src\job\mod.rs:13:5
   |
13 | use jortestkit::prelude::ProcessOutput;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::process::Command`
  --> registration-service\src\job\mod.rs:18:5
   |
18 | use std::process::Command;
   |     ^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::process::ExitStatus`
  --> registration-service\src\job\mod.rs:19:5
   |
19 | use std::process::ExitStatus;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::str::FromStr`
  --> registration-service\src\job\mod.rs:20:5
   |
20 | use std::str::FromStr;
   |     ^^^^^^^^^^^^^^^^^

error[E0061]: this function takes 1 argument but 0 arguments were supplied
  --> registration-service\src\args\mod.rs:46:31
   |
46 |                     let job = VoteRegistrationJobBuilder::new()
   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-- supplied 0 arguments
   |                               |
   |                               expected 1 argument
   |
note: associated function defined here
  --> registration-service\src\job\builder.rs:33:12
   |
33 |     pub fn new(config: Configuration) -> Self {
   |            ^^^ ---------------------

error[E0308]: mismatched types
  --> registration-service\src\args\mod.rs:48:43
   |
48 |                         .with_cardano_cli(&configuration.cardano_cli)
   |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `CardanoCli`, found `&PathBuf`
   |
note: return type inferred to be `CardanoCli` here
  --> registration-service\src\args\mod.rs:41:50
   |
41 |                 if let Some((job_id, request)) = manager.request_to_start()? {
   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `tip` found for struct `CardanoCli` in the current scope
   --> registration-service\src\rest.rs:169:44
    |
169 |     Ok(context_lock.cardano_cli_executor().tip()).map(|r| warp::reply::json(&r))
    |                                            ^^^ method not found in `CardanoCli`
    |
   ::: registration-service\src\cardano\cli\mod.rs:17:1
    |
17  | pub struct CardanoCli {
    | --------------------- method `tip` not found for this
    |
    = help: items from traits can only be used if the trait is implemented and in scope
    = note: the following traits define an item `tip`, perhaps you need to implement one of them:
            candidate #1: `SyncNode`
            candidate #2: `grpc::node::node_server::Node`

error[E0599]: no method named `transaction_submit` found for struct `CardanoCli` in the current scope
   --> registration-service\src\rest.rs:193:10
    |
193 |         .transaction_submit(bytes.to_vec())?;
    |          ^^^^^^^^^^^^^^^^^^ help: there is an associated function with a similar name: `transaction`
    |
   ::: registration-service\src\cardano\cli\mod.rs:17:1
    |
17  | pub struct CardanoCli {
    | --------------------- method `transaction_submit` not found for this

error[E0599]: no method named `query_utxo` found for struct `CardanoCli` in the current scope
   --> registration-service\src\rest.rs:180:44
    |
180 |     Ok(context_lock.cardano_cli_executor().query_utxo(address)).map(|r| warp::reply::json(&r))
    |                                            ^^^^^^^^^^ help: there is an associated function with a similar name: `query`
    |
   ::: registration-service\src\cardano\cli\mod.rs:17:1
    |
17  | pub struct CardanoCli {
    | --------------------- method `query_utxo` not found for this

error[E0609]: no field `config` on type `&Query`
  --> registration-service\src\cardano\cli\api\query.rs:18:51
   |
18 |         let command = self.query_command.tip(self.config.network).build();
   |                                                   ^^^^^^ unknown field
   |
   = note: available fields are: `query_command`

error[E0599]: no method named `query_utxo` found for reference `&Query` in the current scope
  --> registration-service\src\cardano\cli\api\query.rs:40:24
   |
40 |         get_funds(self.query_utxo(payment_address)).map_err(Into::into)
   |                        ^^^^^^^^^^ method not found in `&Query`

error[E0609]: no field `status` on type `Q`
  --> registration-service\src\cardano\cli\api\transaction.rs:21:39
   |
18 |     pub fn sign<P: AsRef<Path>, Q: AsRef<Path>>(&self, tx_raw: P, payment_skey_file: P,output: Q) -> Result<ExitStatus,Error> {
   |                                 - type parameter 'Q' declared here
...
21 |         println!("status: {}", output.status);
   |                                       ^^^^^^

error[E0609]: no field `stdout` on type `Q`
  --> registration-service\src\cardano\cli\api\transaction.rs:22:45
   |
18 |     pub fn sign<P: AsRef<Path>, Q: AsRef<Path>>(&self, tx_raw: P, payment_skey_file: P,output: Q) -> Result<ExitStatus,Error> {
   |                                 - type parameter 'Q' declared here
...
22 |         std::io::stdout().write_all(&output.stdout)?;
   |                                             ^^^^^^

error[E0609]: no field `stderr` on type `Q`
  --> registration-service\src\cardano\cli\api\transaction.rs:23:45
   |
18 |     pub fn sign<P: AsRef<Path>, Q: AsRef<Path>>(&self, tx_raw: P, payment_skey_file: P,output: Q) -> Result<ExitStatus,Error> {
   |                                 - type parameter 'Q' declared here
...
23 |         std::io::stderr().write_all(&output.stderr)?;
   |                                             ^^^^^^

error[E0308]: mismatched types
  --> registration-service\src\cardano\cli\command\address\build.rs:13:24
   |
13 |         self.command = self.command.arg("--verification-key-file").arg(verification_key.as_ref());
   |         ------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `std::process::Command`, found `&mut std::process::Command`
   |         |
   |         expected due to the type of this binding

error[E0308]: mismatched types
  --> registration-service\src\cardano\cli\command\address\build.rs:18:24
   |
18 |         self.command = self.command.arg("--stake-verification-key-file").arg(stake_verification_key.as_ref());
   |         ------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `std::process::Command`, found `&mut std::process::Command`
   |         |
   |         expected due to the type of this binding

error[E0308]: mismatched types
  --> registration-service\src\cardano\cli\command\address\build.rs:23:24
   |
23 |         self.command = self.command.arg("--out-file").arg(out_file.as_ref());
   |         ------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `std::process::Command`, found `&mut std::process::Command`
   |         |
   |         expected due to the type of this binding

error[E0308]: mismatched types
  --> registration-service\src\cardano\cli\command\address\build.rs:28:24
   |
28 |         self.command = self.command.arg(network);
   |         ------------   ^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `std::process::Command`, found `&mut std::process::Command`
   |         |
   |         expected due to the type of this binding

error[E0609]: no field `config` on type `QueryCommand`
  --> registration-service\src\cardano\cli\command\query.rs:14:60
   |
14 |         self.command = command.arg("tip").arg_network(self.config.network);
   |                                                            ^^^^^^ unknown field
   |
   = note: available fields are: `command`

error[E0308]: mismatched types
  --> registration-service\src\cardano\cli\command\query.rs:30:9
   |
29 |     pub fn build(self) {
   |                        - expected `()` because of default return type
30 |         self.command
   |         ^^^^^^^^^^^^ expected `()`, found struct `std::process::Command`

error[E0277]: the trait bound `P: AsRef<OsStr>` is not satisfied
   --> registration-service\src\cardano\cli\command\transaction\id.rs:13:58
    |
13  |         self.command = self.command.arg("--tx-file").arg(tx_signed);
    |                                                      --- ^^^^^^^^^ the trait `AsRef<OsStr>` is not implemented for `P`
    |                                                      |
    |                                                      required by a bound introduced by this call
    |
note: required by a bound in `std::process::Command::arg`
   --> C:\Users\Dariusz\.rustup\toolchains\stable-x86_64-pc-windows-msvc\lib/rustlib/src/rust\library\std\src\process.rs:603:19
    |
603 |     pub fn arg<S: AsRef<OsStr>>(&mut self, arg: S) -> &mut Command {
    |                   ^^^^^^^^^^^^ required by this bound in `std::process::Command::arg`
help: consider further restricting this bound
    |
12  |     pub fn tx_file<P: AsRef<Path> + std::convert::AsRef<std::ffi::OsStr>>(self, tx_signed: P) -> Self {
    |                                   ++++++++++++++++++++++++++++++++++++++

error[E0308]: mismatched types
  --> registration-service\src\cardano\cli\command\transaction\id.rs:13:24
   |
13 |         self.command = self.command.arg("--tx-file").arg(tx_signed);
   |         ------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `std::process::Command`, found `&mut std::process::Command`
   |         |
   |         expected due to the type of this binding

error[E0308]: mismatched types
  --> registration-service\src\cardano\cli\command\transaction\sign.rs:14:24
   |
14 |         self.command = self.command.arg("--tx-body-file").arg(tx_raw);
   |         ------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `std::process::Command`, found `&mut std::process::Command`
   |         |
   |         expected due to the type of this binding

error[E0277]: the trait bound `P: AsRef<OsStr>` is not satisfied
   --> registration-service\src\cardano\cli\command\transaction\sign.rs:19:67
    |
19  |         self.command = self.command.arg("--signing-key-file").arg(signing_key_file);
    |                                                               --- ^^^^^^^^^^^^^^^^ the trait `AsRef<OsStr>` is not implemented for `P`
    |                                                               |
    |                                                               required by a bound introduced by this call
    |
note: required by a bound in `std::process::Command::arg`
   --> C:\Users\Dariusz\.rustup\toolchains\stable-x86_64-pc-windows-msvc\lib/rustlib/src/rust\library\std\src\process.rs:603:19
    |
603 |     pub fn arg<S: AsRef<OsStr>>(&mut self, arg: S) -> &mut Command {
    |                   ^^^^^^^^^^^^ required by this bound in `std::process::Command::arg`
help: consider further restricting this bound
    |
18  |     pub fn signing_key_file<P: AsRef<Path> + std::convert::AsRef<std::ffi::OsStr>>(self, signing_key_file: P) -> Self {
    |                                            ++++++++++++++++++++++++++++++++++++++

error[E0308]: mismatched types
  --> registration-service\src\cardano\cli\command\transaction\sign.rs:19:24
   |
19 |         self.command = self.command.arg("--signing-key-file").arg(signing_key_file);
   |         ------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `std::process::Command`, found `&mut std::process::Command`
   |         |
   |         expected due to the type of this binding

error[E0308]: mismatched types
  --> registration-service\src\cardano\cli\command\transaction\sign.rs:24:24
   |
24 |         self.command = self.command.arg(network);
   |         ------------   ^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `std::process::Command`, found `&mut std::process::Command`
   |         |
   |         expected due to the type of this binding

error[E0308]: mismatched types
  --> registration-service\src\cardano\cli\command\transaction\sign.rs:29:24
   |
29 |         self.command = self.command.arg("--out-file").arg(output.as_ref());
   |         ------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `std::process::Command`, found `&mut std::process::Command`
   |         |
   |         expected due to the type of this binding

error[E0277]: the trait bound `P: AsRef<OsStr>` is not satisfied
   --> registration-service\src\cardano\cli\command\transaction\submit.rs:14:58
    |
14  |         self.command = self.command.arg("--tx-file").arg(tx_signed);
    |                                                      --- ^^^^^^^^^ the trait `AsRef<OsStr>` is not implemented for `P`
    |                                                      |
    |                                                      required by a bound introduced by this call
    |
note: required by a bound in `std::process::Command::arg`
   --> C:\Users\Dariusz\.rustup\toolchains\stable-x86_64-pc-windows-msvc\lib/rustlib/src/rust\library\std\src\process.rs:603:19
    |
603 |     pub fn arg<S: AsRef<OsStr>>(&mut self, arg: S) -> &mut Command {
    |                   ^^^^^^^^^^^^ required by this bound in `std::process::Command::arg`
help: consider further restricting this bound
    |
13  |     pub fn tx_file<P: AsRef<Path> + std::convert::AsRef<std::ffi::OsStr>>(self, tx_signed: P) -> Self {
    |                                   ++++++++++++++++++++++++++++++++++++++

error[E0308]: mismatched types
  --> registration-service\src\cardano\cli\command\transaction\submit.rs:14:24
   |
14 |         self.command = self.command.arg("--tx-file").arg(tx_signed);
   |         ------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `std::process::Command`, found `&mut std::process::Command`
   |         |
   |         expected due to the type of this binding

error[E0308]: mismatched types
  --> registration-service\src\cardano\cli\command\transaction\mod.rs:16:39
   |
16 |         id::TransactionIdCommand::new(self.command.arg("txid"))
   |                                       ^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `std::process::Command`, found `&mut std::process::Command`

error[E0308]: mismatched types
  --> registration-service\src\cardano\cli\command\transaction\mod.rs:20:43
   |
20 |         sign::TransactionSignCommand::new(self.command.arg("sign"))
   |                                           ^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `std::process::Command`, found `&mut std::process::Command`

error[E0308]: mismatched types
  --> registration-service\src\cardano\cli\command\transaction\mod.rs:24:47
   |
24 |         submit::TransactionSubmitCommand::new(self.command.arg("submit"))
   |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `std::process::Command`, found `&mut std::process::Command`

error[E0609]: no field `exe` on type `&CardanoCli`
  --> registration-service\src\cardano\cli\mod.rs:27:41
   |
27 |         let command = Command::new(self.exe.clone());
   |                                         ^^^ unknown field
   |
   = note: available fields are: `config`

error[E0609]: no field `exe` on type `&CardanoCli`
  --> registration-service\src\cardano\cli\mod.rs:33:41
   |
33 |         let command = Command::new(self.exe.clone());
   |                                         ^^^ unknown field
   |
   = note: available fields are: `config`

error[E0599]: no method named `stake_address` found for struct `CardanoCliCommand` in the current scope
  --> registration-service\src\cardano\cli\mod.rs:35:47
   |
35 |         StakeAddress::new(cardano_cli_command.stake_address())
   |                                               ^^^^^^^^^^^^^ help: there is an associated function with a similar name: `address`
   |
  ::: registration-service\src\cardano\cli\command\mod.rs:13:1
   |
13 | pub struct CardanoCliCommand {
   | ---------------------------- method `stake_address` not found for this

error[E0609]: no field `exe` on type `&CardanoCli`
  --> registration-service\src\cardano\cli\mod.rs:39:41
   |
39 |         let command = Command::new(self.exe.clone());
   |                                         ^^^ unknown field
   |
   = note: available fields are: `config`

error[E0609]: no field `exe` on type `&CardanoCli`
  --> registration-service\src\cardano\cli\mod.rs:45:41
   |
45 |         let command = Command::new(self.exe.clone());
   |                                         ^^^ unknown field
   |
   = note: available fields are: `config`

error[E0277]: the trait bound `CardanoKeyTemplate: Serialize` is not satisfied
    --> registration-service\src\cardano\data.rs:45:45
     |
45   |         let content = serde_json::to_string(&self)?;
     |                       --------------------- ^^^^^ the trait `Serialize` is not implemented for `CardanoKeyTemplate`
     |                       |
     |                       required by a bound introduced by this call
     |
     = help: the following other types implement trait `Serialize`:
               &'a T
               &'a mut T
               ()
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
               (T0, T1, T2, T3, T4, T5)
             and 389 others
     = note: required because of the requirements on the impl of `Serialize` for `&CardanoKeyTemplate`
note: required by a bound in `serde_json::to_string`
    --> C:\Users\Dariusz\.cargo\registry\src\github.com-1ecc6299db9ec823\serde_json-1.0.81\src\ser.rs:2225:17
     |
2225 |     T: ?Sized + Serialize,
     |                 ^^^^^^^^^ required by this bound in `serde_json::to_string`

error[E0308]: mismatched types
  --> registration-service\src\job\builder.rs:35:37
   |
35 |             jcli: PathBuf::from_str(config.jcli).unwrap(),
   |                                     ^^^^^^^^^^^ expected `&str`, found struct `PathBuf`

error[E0308]: mismatched types
  --> registration-service\src\job\builder.rs:36:42
   |
36 |             cardano_cli: CardanoCli::new(config.cardano_cli),
   |                                          ^^^^^^^^^^^^^^^^^^ expected struct `config::Configuration`, found struct `PathBuf`

error[E0609]: no field `working_dir` on type `config::Configuration`
  --> registration-service\src\job\builder.rs:39:33
   |
39 |             working_dir: config.working_dir,
   |                                 ^^^^^^^^^^^ unknown field
   |
   = note: available fields are: `port`, `result_dir`, `jcli`, `cardano_cli`, `voter_registration` ... and 2 others

error[E0609]: no field `cardano` on type `VoteRegistrationJobBuilder`
  --> registration-service\src\job\builder.rs:74:31
   |
74 |             cardano_cli: self.cardano - cli,
   |                               ^^^^^^^ unknown field
   |
   = note: available fields are: `jcli`, `cardano_cli`, `voter_registration`, `network`, `working_dir`

error[E0599]: no method named `generate_stake_address` found for struct `CardanoCli` in the current scope
  --> registration-service\src\job\mod.rs:80:14
   |
80 |             .generate_stake_address(&stake_vkey_path, &rewards_address_path)?;
   |              ^^^^^^^^^^^^^^^^^^^^^^ help: there is an associated function with a similar name: `stake_address`
   |
  ::: registration-service\src\cardano\cli\mod.rs:17:1
   |
17 | pub struct CardanoCli {
   | --------------------- method `generate_stake_address` not found for this

error[E0599]: no method named `build_address` found for struct `CardanoCli` in the current scope
  --> registration-service\src\job\mod.rs:88:26
   |
88 |         self.cardano_cli.build_address(
   |                          ^^^^^^^^^^^^^ help: there is an associated function with a similar name: `address`
   |
  ::: registration-service\src\cardano\cli\mod.rs:17:1
   |
17 | pub struct CardanoCli {
   | --------------------- method `build_address` not found for this

error[E0599]: no method named `get_funds` found for struct `CardanoCli` in the current scope
  --> registration-service\src\job\mod.rs:98:38
   |
98 |         let funds = self.cardano_cli.get_funds(&payment_address);
   |                                      ^^^^^^^^^ method not found in `CardanoCli`
   |
  ::: registration-service\src\cardano\cli\mod.rs:17:1
   |
17 | pub struct CardanoCli {
   | --------------------- method `get_funds` not found for this

error[E0599]: no method named `tip_slot` found for struct `CardanoCli` in the current scope
   --> registration-service\src\job\mod.rs:100:37
    |
100 |         let slot = self.cardano_cli.tip_slot();
    |                                     ^^^^^^^^ method not found in `CardanoCli`
    |
   ::: registration-service\src\cardano\cli\mod.rs:17:1
    |
17  | pub struct CardanoCli {
    | --------------------- method `tip_slot` not found for this

error[E0599]: no method named `generate_metadata` found for struct `PathBuf` in the current scope
   --> registration-service\src\job\mod.rs:104:33
    |
104 |         self.voter_registration.generate_metadata(
    |                                 ^^^^^^^^^^^^^^^^^ method not found in `PathBuf`

warning: unused import: `std::io::Write`
 --> registration-service\src\cardano\cli\mod.rs:8:5
  |
8 | use std::io::Write;
  |     ^^^^^^^^^^^^^^

warning: unused import: `jortestkit::prelude::ProcessOutput`
 --> registration-service\src\cardano\cli\api\query.rs:4:5
  |
4 | use jortestkit::prelude::ProcessOutput;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `jortestkit::prelude::ProcessOutput`
 --> registration-service\src\cardano\cli\api\transaction.rs:4:5
  |
4 | use jortestkit::prelude::ProcessOutput;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Some errors have detailed explanations: E0061, E0252, E0277, E0308, E0412, E0425, E0432, E0433, E0583...
For more information about an error, try `rustc --explain E0061`.
warning: `registration-service` (lib) generated 31 warnings
error: could not compile `registration-service` due to 129 previous errors; 31 warnings emitted
